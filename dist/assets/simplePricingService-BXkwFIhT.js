const i=new Map,s=5*60*1e3,p="https://api.coingecko.com/api/v3",l="alephium",d=async()=>{try{const o=await fetch(`${p}/simple/price?ids=${l}&vs_currencies=usd&include_24hr_change=true&include_last_updated_at=true`);if(!o.ok)throw new Error(`Failed to fetch price data: ${o.status} ${o.statusText}`);const t=await o.json(),r=t.alephium.usd||0,n=t.alephium.usd_24h_change||0;return{price:r,priceChange24h:n}}catch(o){return console.error("[SimplePricing] Error fetching Alephium price from CoinGecko:",o),{price:.44,priceChange24h:0}}},h=async()=>{const o=i.get("ALPH");if(o&&Date.now()<o.expires)return console.log("[SimplePricing] Using cached ALPH price:",o.data.price),o.data.price;try{console.log("[SimplePricing] Fetching ALPH price from CoinGecko...");const t=await d();if(t.price>0){const r={tokenId:"ALPH",symbol:"ALPH",price:t.price,source:"coingecko",lastUpdated:Date.now()};return i.set("ALPH",{data:r,expires:Date.now()+s}),console.log("[SimplePricing] ✅ ALPH price from CoinGecko:",t.price),t.price}return console.warn("[SimplePricing] ⚠️ CoinGecko returned invalid ALPH price:",t.price),.44}catch(t){return console.error("[SimplePricing] ❌ Error fetching ALPH price from CoinGecko:",t),.44}},u=async o=>{const t={},r=[];for(const e of o){const c=i.get(e);c&&Date.now()<c.expires?t[e]=c.data:r.push(e)}if(r.length===0)return t;const n=r.filter(e=>e==="ALPH"||e.toLowerCase()==="alph"),a=r.filter(e=>e!=="ALPH"&&e.toLowerCase()!=="alph");if(n.length>0){console.log("[SimplePricing] Fetching ALPH for batch request...");const e=await h(),c={tokenId:"ALPH",symbol:"ALPH",price:e,source:e>0?"coingecko":"estimate",lastUpdated:Date.now()};t.ALPH=c,i.set("ALPH",{data:c,expires:Date.now()+s})}if(a.length>0){console.log(`[SimplePricing] ⚠️ Found ${a.length} non-ALPH tokens - setting estimate prices (CoinGecko doesn't support Alephium tokens)`);for(const e of a){const c={tokenId:e,symbol:e.substring(0,8).toUpperCase(),price:0,source:"estimate",lastUpdated:Date.now()};t[e]=c,i.set(e,{data:c,expires:Date.now()+s})}}for(const e of r)if(!t[e]){const c={tokenId:e,symbol:e.substring(0,8).toUpperCase(),price:0,source:"estimate",lastUpdated:Date.now()};t[e]=c,i.set(e,{data:c,expires:Date.now()+s})}return t},g=o=>{const t={};for(const[r,n]of Object.entries(o))t[r]={tokenId:n.tokenId,price:n.price,source:n.source,lastUpdated:n.lastUpdated};return t};export{h as getAlphPrice,u as getBatchTokenPrices,g as transformPricesForRedux};
