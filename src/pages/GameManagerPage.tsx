
import React, { useState, useEffect } from "react";
import { NostrEvent } from "@/lib/nostr/types";
import MainLayout from "@/components/layout/MainLayout";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { nostrService } from "@/lib/nostr";
import { getMediaUrlsFromEvent } from "@/lib/nostr/utils/media-extraction";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";

interface Game {
  id: string;
  title: string;
  description: string;
  imageUrl: string;
  author: string;
  createdAt: number;
  url: string;
  tags: string[];
}

const GameManagerPage: React.FC = () => {
  const [games, setGames] = useState<Game[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("all");
  const [newGameTitle, setNewGameTitle] = useState("");
  const [newGameDescription, setNewGameDescription] = useState("");
  const [newGameUrl, setNewGameUrl] = useState("");
  const [newGameImageUrl, setNewGameImageUrl] = useState("");
  const [newGameTags, setNewGameTags] = useState("");
  const [submitting, setSubmitting] = useState(false);
  
  useEffect(() => {
    const fetchGames = async () => {
      try {
        setLoading(true);
        
        // Fetch games from Nostr network
        // This is a placeholder - in a real app, you would use nostr-tools to query events
        const mockGames: Game[] = [
          {
            id: "game1",
            title: "Block Warriors",
            description: "Fight with blocks in this exciting game!",
            imageUrl: "https://images.unsplash.com/photo-1604144580413-1016ec1ca4b1",
            author: "npub1abcdef",
            createdAt: Date.now() / 1000 - 86400,
            url: "/games/blockwarriors",
            tags: ["action", "multiplayer"]
          },
          {
            id: "game2",
            title: "Nostr Tetris",
            description: "Classic tetris game with a Nostr twist",
            imageUrl: "https://images.unsplash.com/photo-1552820728-8b83bb6b773f",
            author: "npub1defghi",
            createdAt: Date.now() / 1000 - 172800,
            url: "/games/tetris",
            tags: ["puzzle", "classic"]
          },
          {
            id: "game3",
            title: "Alephium Pet",
            description: "Virtual pet powered by Alephium blockchain",
            imageUrl: "https://images.unsplash.com/photo-1625720010635-dd011cf35368",
            author: "npub1jklmno",
            createdAt: Date.now() / 1000 - 259200,
            url: "/games/tamagotchi",
            tags: ["virtual pet", "blockchain"]
          }
        ];
        
        setGames(mockGames);
      } catch (error) {
        console.error("Failed to fetch games:", error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchGames();
  }, []);
  
  const filteredGames = games.filter(game => {
    if (activeTab === "all") return true;
    return game.tags.includes(activeTab);
  });
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!newGameTitle || !newGameDescription || !newGameUrl) {
      toast.error("Please fill in all required fields");
      return;
    }
    
    // Check if user is logged in
    if (!nostrService.publicKey) {
      toast.error("Please log in to publish a game");
      return;
    }
    
    setSubmitting(true);
    
    try {
      // Create a properly formatted NostrEvent to publish
      const fullEvent: NostrEvent = {
        id: "", // Will be generated by nostr-tools
        pubkey: nostrService.publicKey || "",
        created_at: Math.floor(Date.now() / 1000),
        kind: 5001, // Custom event type for games
        tags: [
          ["title", newGameTitle],
          ["d", `game-${Date.now()}`], // Unique identifier
          ["url", newGameUrl],
          ...newGameTags.split(",")
            .map(tag => tag.trim())
            .filter(Boolean)
            .map(tag => ["t", tag])
        ],
        content: newGameDescription,
        sig: "" // Will be generated during signing
      };
      
      // Publish game to Nostr network
      // Fix: Use only one argument instead of two
      const eventId = await nostrService.publishEvent(fullEvent);
      
      if (eventId) {
        toast.success("Game published successfully");
        
        // Add to local state
        const newGame: Game = {
          id: eventId,
          title: newGameTitle,
          description: newGameDescription,
          imageUrl: newGameImageUrl || "https://images.unsplash.com/photo-1614465000772-1b9495bcd3b8",
          author: nostrService.publicKey || "",
          createdAt: Math.floor(Date.now() / 1000),
          url: newGameUrl,
          tags: newGameTags.split(",").map(tag => tag.trim()).filter(Boolean)
        };
        
        setGames([...games, newGame]);
        
        // Reset form
        setNewGameTitle("");
        setNewGameDescription("");
        setNewGameUrl("");
        setNewGameImageUrl("");
        setNewGameTags("");
      } else {
        toast.error("Failed to publish game");
      }
    } catch (error) {
      console.error("Failed to publish game:", error);
      toast.error("Error publishing game");
    } finally {
      setSubmitting(false);
    }
  };
  
  return (
    <MainLayout>
      <div className="container max-w-5xl mx-auto py-4 space-y-8">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            <h1 className="text-3xl font-bold">BlockNoster Games</h1>
            <p className="text-muted-foreground">Discover and play blockchain-powered games</p>
          </div>
          
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full sm:w-auto">
            <TabsList className="grid grid-cols-4 w-full sm:w-auto">
              <TabsTrigger value="all">All</TabsTrigger>
              <TabsTrigger value="action">Action</TabsTrigger>
              <TabsTrigger value="puzzle">Puzzle</TabsTrigger>
              <TabsTrigger value="blockchain">Chain</TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
        
        {loading ? (
          <div className="flex justify-center py-12">
            <Loader2 className="animate-spin h-8 w-8 text-primary" />
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {filteredGames.map((game) => (
              <Card key={game.id} className="overflow-hidden">
                <div className="aspect-video w-full overflow-hidden bg-muted">
                  <img 
                    src={game.imageUrl} 
                    alt={game.title} 
                    className="w-full h-full object-cover transition-transform hover:scale-105"
                  />
                </div>
                <CardHeader>
                  <CardTitle>{game.title}</CardTitle>
                  <CardDescription className="flex items-center gap-2">
                    <span>By {nostrService.formatPubkey(game.author, 'short')}</span>
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="line-clamp-2">{game.description}</p>
                  <div className="mt-3 flex flex-wrap gap-2">
                    {game.tags.map((tag) => (
                      <Badge key={tag} variant="outline">{tag}</Badge>
                    ))}
                  </div>
                </CardContent>
                <CardFooter>
                  <Button variant="default" className="w-full" asChild>
                    <a href={game.url}>Play Now</a>
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        )}
        
        {/* Submit new game form */}
        <Card>
          <CardHeader>
            <CardTitle>Submit Your Game</CardTitle>
            <CardDescription>Share your blockchain game with the BlockNoster community</CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label htmlFor="title" className="text-sm font-medium">Game Title *</label>
                  <Input 
                    id="title"
                    value={newGameTitle}
                    onChange={(e) => setNewGameTitle(e.target.value)}
                    placeholder="Enter game title"
                    required
                  />
                </div>
                
                <div className="space-y-2">
                  <label htmlFor="url" className="text-sm font-medium">Game URL *</label>
                  <Input 
                    id="url"
                    value={newGameUrl}
                    onChange={(e) => setNewGameUrl(e.target.value)}
                    placeholder="https://"
                    required
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <label htmlFor="description" className="text-sm font-medium">Description *</label>
                <Input 
                  id="description"
                  value={newGameDescription}
                  onChange={(e) => setNewGameDescription(e.target.value)}
                  placeholder="Briefly describe your game"
                  required
                />
              </div>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label htmlFor="imageUrl" className="text-sm font-medium">Image URL</label>
                  <Input 
                    id="imageUrl"
                    value={newGameImageUrl}
                    onChange={(e) => setNewGameImageUrl(e.target.value)}
                    placeholder="https://"
                  />
                </div>
                
                <div className="space-y-2">
                  <label htmlFor="tags" className="text-sm font-medium">Tags (comma-separated)</label>
                  <Input 
                    id="tags"
                    value={newGameTags}
                    onChange={(e) => setNewGameTags(e.target.value)}
                    placeholder="action, puzzle, multiplayer"
                  />
                </div>
              </div>
              
              <Button type="submit" disabled={submitting} className="w-full">
                {submitting ? (
                  <>
                    <Loader2 className="animate-spin h-4 w-4 mr-2" />
                    Publishing...
                  </>
                ) : "Publish Game"}
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
};

export default GameManagerPage;
